version: "3.7"
## Traefik reverse proxy
services:
  traefik:
    # The official v2.0 Traefik docker image
    image: traefik:v2.0.5
    restart: always
    command:
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.watch"
      - "--entrypoints.https.address=:443"
      - "--certificatesresolvers.traefik.acme.httpchallenge=true"
      - "--certificatesresolvers.traefik.acme.httpchallenge.entrypoint=web-secure"
      - "--certificatesresolvers.traefik.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.traefik.acme.email=ayanb1999@gmail.com"
      - "--certificatesresolvers.traefik.acme.storage=/acme.json"      
    ports:
      - "80:80"
      - "443:443"
      - "50051:50051"
      - "50052:50052"
      - "50053:50053"
    networks:
      - inbound
      - traefik
    links:
      - prometheus
      - grafana
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.toml:/traefik.toml
      # - ./acme.json:/acme.json
      - ./logs:/var/log/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_HOST}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.routers.traefik.tls.certresolver=le"
      - "traefik.http.routers.traefik.tls.domains[0].main=trf.ethcode.dev"
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$LAHn3.vc$$47mKL7WmzOQWwJ2OjND46/"

  ## Remix Tests API
  remix-tests-api:
    container_name: remix-tests-api
    restart: always
    build: remix-tests-api/
    networks:
      - inbound
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.remix-tests-api.rule=Host(`${RT_API_HOST}`)"
      - "traefik.http.routers.remix-tests-api.entrypoints=web,web-secure"
      - "traefik.http.routers.remix-tests-api.tls.certresolver=le"
      - "traefik.http.routers.remix-tests-api.tls.domains[0].main=rtapi.ethcode.dev"
      - "traefik.http.services.remix-tests-api.loadbalancer.server.scheme=h2c"
      - "traefik.http.services.remix-tests-api.loadbalancer.server.port=50051"
  
  ## Remix Debug API
  remix-debug-api:
    container_name: remix-debug-api
    restart: always
    build: remix-debug-api/
    networks:
      - inbound
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.remix-debug-api.rule=Host(`${RD_API_HOST}`)"
      - "traefik.http.routers.remix-debug-api.entrypoints=web,web-secure"
      - "traefik.http.routers.remix-debug-api.tls.certresolver=le"
      - "traefik.http.routers.remix-debug-api.tls.domains[0].main=remixdebug.ethcode.dev"
      - "traefik.http.services.remix-debug-api.loadbalancer.server.scheme=h2c"
      - "traefik.http.services.remix-debug-api.loadbalancer.server.port=50052"

  # ## client call api
  client-call-api:
    container_name: client-call-api
    restart: always
    build: client-call-api/
    networks:
      - inbound
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client-call-api.rule=Host(`${CC_API_HOST}`)"
      - "traefik.http.routers.client-call-api.entrypoints=web,web-secure"
      - "traefik.http.routers.client-call.tls.certresolver=le"
      - "traefik.http.routers.client-call.tls.domains[0].main=cc.ethcode.dev"
      - "traefik.http.services.client-call-api.loadbalancer.server.scheme=h2c"
      - "traefik.http.services.client-call-api.loadbalancer.server.port=50053"

  ## ganache
  ganache:
    image: trufflesuite/ganache-cli
    restart: always
    networks:
      - inbound
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ganache-api.rule=Host(`ganache.localhost`)"
      - "traefik.http.routers.ganache-api.entrypoints=web"
      - "traefik.http.services.ganache-api.loadbalancer.server.port=8545"

  ## Prometheus
  prometheus:
    image: prom/prometheus
    user: "root:root"
    restart: always
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - inbound
      - traefik
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`${PROM_HOST}`)"
      - "traefik.http.routers.prometheus.entrypoints=web-secure"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.tls.certresolver=le"
      - "traefik.http.routers.prometheus.tls.domains[0].main=prom.ethcode.dev"
      - "traefik.docker.network=inbound"
      - "traefik.http.routers.prometheus.middlewares=auth"
      - "traefik.prometheus.auth.basicauth.users=admin:$$apr1$$LAHn3.vc$$47mKL7WmzOQWwJ2OjND46/"


  # Node Exporter
  node-exporter:
    image: prom/node-exporter
    ports:
      - '9100:9100'
    networks: 
      - inbound
    labels:
      - "traefik.http.routers.nodeExporter.rule=Host(`node.ethcode.dev`)"
      - "traefik.http.routers.nodeExporter.entrypoints=web-secure"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9100"
      - "traefik.http.routers.prometheus.tls.certresolver=le"
      - "traefik.docker.network=inbound"

  ## Grafana
  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    links: 
      - prometheus
    volumes:
      - ./grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - inbound
    ports:
      - "3000:3000" 
    env_file:
      - ./grafana/config.monitoring
    user: "root:root"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`${GRAFANA_HOST}`)"
      - "traefik.http.routers.grafana.entrypoints=web-secure"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.tls.certresolver=le"
      - "traefik.http.routers.grafana.tls.domains[0].sans=graf.ethcode.dev"
      - "traefik.docker.network=inbound"

networks:
  traefik:
    driver: overlay
    name: traefik
  inbound:
    driver: overlay
    name: inbound
  # default:
  #   external:
  #     name: inbound

volumes:
    prometheus_data: {}
    grafana_data: {}